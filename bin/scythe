#!/usr/bin/env ruby

$:.unshift(File.join(File.dirname(__FILE__),'/../lib'))
require 'scythe'


include Log4r

mylogger=Scythe::LogMachine.new

Choice.options do
  header ''
  header 'Specific options:'

  option :age, :required => true do
    short '-a'
    long '--age=AGE'
    desc 'Terminate instances older than max <age> (in seconds).'
  end
  option :tag, :required => true do
    short '-t'
    long '--tag=TAG'
    desc 'Only terminate instances with <tag>'
  end
  option :n do
    short '-n'
    long '--noninteractive'
    desc 'Non interactive. Dont prompt'
    default false
  end
  separator ''
  separator 'Common options: '

  option :help do
    long '--help'
    desc 'Show this message'
  end
  option :debug do
    short '-d'
    long '--debug'
    desc 'Show debug (verbose)'
    action do
      mylogger.level=Log4r::DEBUG
    end
  end
end

max_age=Choice[:age].to_i
required_tag=Choice[:tag]

include Fog
include Scythe

say "\t\t\t!!!   WARNING     !! \n"
say "This program will TERMINATE any instance OLDER than #{max_age} SECONDS with required TAG '#{required_tag}'"

servers = get_servers_for_termination(max_age, required_tag)

say "#{servers.length} servers to be terminated\n"
say "Servers:\n" unless servers.length == 0
servers.each do |server|
  server_age = DateTime.now.strftime("%s").to_i - server.created_at.strftime("%s").to_i
  print "[#{server.id}][#{server.tags}][#{server_age} seconds]\n"
end
unless servers.length > 0
  say "No servers match. Try again later."
  exit 0
end

unless Choice[:n]

  unless (ask("Continue _Terminating_ above (#{servers.length}) servers? y/n") == "y")
    say "exit safely"
    exit 1
  end
end
say "non interactive" if Choice[:n]
  servers.each do |s|
    say "Ok, its been great, RIP #{s.id}"
    terminate_server_by_id(s.id, 'basho-builds')
  end

say "complete"



